import express from 'express';

class Server {
  #app;
  #endpoints;
  #port;

  constructor(endpoints, port) {
    if (endpoints == null || !validateEndpoints(endpoints)) {
      throw new Error('Invalid endpoints provided to Server constructor');
    }
    if (!Number.isInteger(port) || port < 0 || port > portMaxValue) {
      throw new Error('Invalid port provided to Server constructor');
    }
    this.#app = express();
    this.#app.use(express.raw({
      type: () => { return true; }
    }));
    this.#app.disable('x-powered-by');
    this.#app.all('/*', async (req, res) => {
      await handleRequest(req, res, this.#endpoints);
    });
    this.#endpoints = { };
    for (const path in endpoints) {
      this.#endpoints[path] = { };
      for (const method in endpoints[path]) {
        this.#endpoints[path][method] = endpoints[path][method];
      }
    }
    this.#port = port;
  }

  start() {
    this.#app.listen(this.#port);
  }
}

const validateEndpoints = (endpoints) => {
  if (endpoints == null) {
    return true;
  }
  if (typeof endpoints !== 'object') {
    return false;
  }
  for (const path in endpoints) {
    if (typeof endpoints[path] !== 'object') {
      return false;
    }
    for (const method in endpoints[path]) {
      if (typeof endpoints[path][method] !== 'function') {
        return false;
      }
    }
  }
  return true;
};

const handleRequest = async (req, res, endpoints) => {
  const request = {
    path: req.path,
    method: req.method,
    headers: { },
    query: { }
  };
  if (req.headers != null) {
    for (const headerKey in req.headers) {
      if (request.headers[headerKey] == null) {
        request.headers[headerKey] = [ ];
      }
      const headerValues = req.headers[headerKey].split(',');
      for (const headerValue of headerValues) {
        request.headers[headerKey].push(headerValue.trim());
      }
    }
  }
  if (req.query != null) {
    for (const queryKey in req.query) {
      if (request.query[queryKey] == null) {
        request.query[queryKey] = [ ];
      }
      if (typeof req.query[queryKey] === 'string') {
        request.query[queryKey].push(req.query[queryKey]);
      }
      else {
        for (const queryValue of req.query[queryKey]) {
          request.query[queryKey].push(queryValue);
        }
      }
    }
  }
  if (req.body != null && req.headers['content-length'] != null) {
    request.body = req.body;
  }
  const response = await (async () => {
    if (endpoints[request.path] == null) {
      return {
        status: 404
      };
    }
    const endpoint = (() => {
      for (const method in endpoints[request.path]) {
        if (method.toLowerCase() === request.method.toLowerCase()) {
          return endpoints[request.path][method];
        }
      }
      return undefined;
    })();
    if (endpoint == null) {
      return {
        status: 405
      };
    }
    return await endpoint(request);
  })();
  if (response == null || !validateResponse(response)) {
    console.error('Unexpected error:\nInvalid response generated by endpoint');
    res.status(500).end();
    return;
  }
  res.status(response.status);
  for (const headerKey in response.headers) {
    if (response.headers[headerKey] == null || response.headers[headerKey].length == 0) {
      res.set(headerKey, '');
    }
    else {
      if (response.headers[headerKey].length == 1) {
        const headerValue = response.headers[headerKey][0];
        res.set(headerKey, headerValue == null ? '' : headerValue);
      }
      else {
        const headerValues = [ ];
        for (const headerValue of response.headers[headerKey]) {
          headerValues.push(headerValue == null ? '' : headerValue);
        }
        res.set(headerKey, headerValues);
      }
    }
  }
  if (response.body == null) {
    res.end();
  }
  else {
    res.send(response.body);
  }
};

const validateResponse = (response) => {
  if (response == null) {
    return true;
  }
  if (typeof response !== 'object') {
    return false;
  }
  if (!Number.isInteger(response.status) || response.status < statusMinValue || response.status > statusMaxValue) {
    return false;
  }
  if (response.headers != null) {
    if (typeof response.headers !== 'object') {
      return false;
    }
    for (const headerKey in response.headers) {
      if (response.headers[headerKey] != null) {
        if (typeof response.headers[headerKey] !== 'object' || typeof response.headers[headerKey].constructor !== 'function' || response.headers[headerKey].constructor.name !== 'Array') {
          return false;
        }
        for (const headerValue of response.headers[headerKey]) {
          if (headerValue != null && typeof headerValue !== 'string') {
            return false;
          }
        }
      }
    }
  }
  if (response.body != null && (typeof response.body !== 'object' || typeof response.body.constructor !== 'function' || response.body.constructor.name !== 'Buffer')) {
    return false;
  }
  return true;
};

const portMaxValue = 65535;
const statusMinValue = 100;
const statusMaxValue = 599;

export {
  Server
};
